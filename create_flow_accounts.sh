#!/bin/bash

# Script to create Flow accounts using public keys from JSON files,
# update flow.json with the new addresses and key configurations,
# and generate a cadence/tests/test_addresses.cdc file.

# Ensure jq is installed
if ! command -v jq &> /dev/null
then
    echo "jq could not be found. Please install jq to run this script."
    echo "Installation instructions:"
    echo "  macOS: brew install jq"
    echo "  Debian/Ubuntu: sudo apt-get install jq"
    exit 1
fi

# --- Configuration ---
ACCOUNTS_TO_CREATE=("admin" "user-one" "receiver")
KEYS_DIRECTORY="keys"
SIGNER_ACCOUNT="emulator-account"
FLOW_JSON_FILE="flow.json"
CADENCE_TESTS_DIR="cadence/tests"
TEST_ADDRESSES_FILE="${CADENCE_TESTS_DIR}/test_addresses.cdc"
# --- End Configuration ---

echo "üöÄ Starting Flow account creation, flow.json update, and test_addresses.cdc generation..."
echo "Ensure your Flow emulator is running and the '$SIGNER_ACCOUNT' account is funded."
echo "------------------------------------------------------------------------"

if [ ! -f "$FLOW_JSON_FILE" ]; then
    echo "‚ùå ERROR: flow.json file not found at: $FLOW_JSON_FILE"
    echo "Please ensure the FLOW_JSON_FILE variable in the script is set correctly."
    exit 1
fi

ALL_SUCCESSFUL=true
# Associative array to store account names and their new addresses for test_addresses.cdc
declare -A CREATED_ACCOUNT_ADDRESSES

for ACCOUNT_NAME in "${ACCOUNTS_TO_CREATE[@]}"
do
    JSON_FILE_PATH="${KEYS_DIRECTORY}/${ACCOUNT_NAME}.json"
    echo "Processing account: ${ACCOUNT_NAME}..."

    if [ ! -f "$JSON_FILE_PATH" ]; then
        echo "‚ùå ERROR: JSON key file not found for '$ACCOUNT_NAME' at: $JSON_FILE_PATH"
        ALL_SUCCESSFUL=false
        echo "------------------------------------------------------------------------"
        continue
    fi

    PUBLIC_KEY=$(jq -r '.public' "$JSON_FILE_PATH")

    if [ -z "$PUBLIC_KEY" ] || [ "$PUBLIC_KEY" == "null" ]; then
        echo "‚ùå ERROR: Could not extract public key for '$ACCOUNT_NAME' from $JSON_FILE_PATH."
        ALL_SUCCESSFUL=false
        echo "------------------------------------------------------------------------"
        continue
    fi

    echo "  üîë Public Key found: ${PUBLIC_KEY:0:10}...${PUBLIC_KEY: -10}"
    echo "  ‚è≥ Attempting to create account '$ACCOUNT_NAME' on the emulator..."
    COMMAND_TO_RUN="flow accounts create --key \"$PUBLIC_KEY\" --signer \"$SIGNER_ACCOUNT\""
    echo "     Command: $COMMAND_TO_RUN"

    OUTPUT=$(eval $COMMAND_TO_RUN 2>&1)
    EXIT_CODE=$?

    if [ $EXIT_CODE -eq 0 ]; then
        NEW_ADDRESS=$(echo "$OUTPUT" | awk '/Address/ {print $2; exit}')

        if [[ "$NEW_ADDRESS" =~ ^0x[0-9a-fA-F]+$ ]]; then
            echo "  ‚úÖ Successfully created account '$ACCOUNT_NAME' with address $NEW_ADDRESS."
            CREATED_ACCOUNT_ADDRESSES["$ACCOUNT_NAME"]="$NEW_ADDRESS"

            echo "  ‚öôÔ∏è Attempting to update $FLOW_JSON_FILE for account '$ACCOUNT_NAME'..."
            TEMP_FLOW_JSON="${FLOW_JSON_FILE}.tmp"
            KEY_FILE_LOCATION="${KEYS_DIRECTORY}/${ACCOUNT_NAME}.pkey"

            if jq --arg account_key "$ACCOUNT_NAME" \
                  --arg new_addr "$NEW_ADDRESS" \
                  --arg key_type_val "file" \
                  --arg key_loc_val "$KEY_FILE_LOCATION" \
                  '(.accounts[$account_key].address) = $new_addr |
                   (.accounts[$account_key].key.type) = $key_type_val |
                   (.accounts[$account_key].key.location) = $key_loc_val' \
                  "$FLOW_JSON_FILE" > "$TEMP_FLOW_JSON"; then
                mv "$TEMP_FLOW_JSON" "$FLOW_JSON_FILE"
                echo "  üëç $FLOW_JSON_FILE updated successfully for '$ACCOUNT_NAME'."
            else
                echo "  ‚ùå ERROR: Failed to update $FLOW_JSON_FILE for '$ACCOUNT_NAME' using jq."
                ALL_SUCCESSFUL=false
            fi
        else
            echo "  ‚ö†Ô∏è Account '$ACCOUNT_NAME' creation command seemed to succeed (exit code 0),"
            echo "     but could not reliably extract a new address from the output."
            echo "$OUTPUT"
            ALL_SUCCESSFUL=false
        fi
    else
        echo "  ‚ùå ERROR: Failed to create account '$ACCOUNT_NAME'. Exit code: $EXIT_CODE"
        echo "$OUTPUT"
        ALL_SUCCESSFUL=false
    fi
    echo "------------------------------------------------------------------------"
done

# Generate test_addresses.cdc if any accounts were successfully processed for it
if [ ${#CREATED_ACCOUNT_ADDRESSES[@]} -gt 0 ]; then
    echo "‚öôÔ∏è Generating $TEST_ADDRESSES_FILE..."
    mkdir -p "$CADENCE_TESTS_DIR" # Ensure the directory exists

    # Start with a header
    echo "// THIS FILE IS AUTOGENERATED BY create_flow_accounts.sh" > "$TEST_ADDRESSES_FILE"
    echo "// DO NOT EDIT MANUALLY - YOUR CHANGES WILL BE OVERWRITTEN"
    echo "// Contains actual account addresses from flow.json for use in Cadence tests.
" >> "$TEST_ADDRESSES_FILE"

    for ACCOUNT_NAME in "${!CREATED_ACCOUNT_ADDRESSES[@]}"; do
        ADDRESS=${CREATED_ACCOUNT_ADDRESSES[$ACCOUNT_NAME]}
        # Convert account_name to TitleCase for the constant name, e.g., user-one -> UserOne
        # Replace hyphens with spaces, then capitalize each word, then remove spaces.
        CONSTANT_NAME_PREFIX=$(echo "$ACCOUNT_NAME" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2);}1' | sed 's/ //g')
        CONSTANT_NAME="${CONSTANT_NAME_PREFIX}AccountAddress"
        echo "pub let $CONSTANT_NAME: Address = $ADDRESS" >> "$TEST_ADDRESSES_FILE"
    done
    echo "
// Example usage in your test file:"
    echo "// import AdminAccountAddress, UserOneAccountAddress from \"./test_addresses.cdc\""
    echo "// ..."
    echo "// let admin = Test.getAccount(AdminAccountAddress)" >> "$TEST_ADDRESSES_FILE"
    echo "üëç $TEST_ADDRESSES_FILE generated successfully."
else
    if [ "$ALL_SUCCESSFUL" = true ]; then # Only print this if other steps were fine
        echo "‚ÑπÔ∏è No accounts were successfully created to generate $TEST_ADDRESSES_FILE."
    fi
fi

echo "------------------------------------------------------------------------"
echo "üèÅ Account creation, flow.json update, and test_addresses.cdc generation finished."

if [ "$ALL_SUCCESSFUL" = true ]; then
    echo "üéâ All specified accounts were processed and flow.json updated successfully."
    if [ ${#CREATED_ACCOUNT_ADDRESSES[@]} -gt 0 ]; then
        echo "üéâ $TEST_ADDRESSES_FILE was also generated/updated."
    fi
else
    echo "‚ö†Ô∏è Some operations encountered errors. Please review the logs above."
fi

if [ "$ALL_SUCCESSFUL" = false ]; then
    echo "üëâ IMPORTANT: Due to errors, please double-check your 'flow.json' and account statuses."
else
    echo "üëâ Your 'flow.json' and '$TEST_ADDRESSES_FILE' should now be updated."
fi 